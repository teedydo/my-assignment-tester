package utilities.runner;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;

import java.io.File;
import java.util.Arrays;

import org.apache.commons.io.comparator.LastModifiedFileComparator;
import org.apache.log4j.LogManager;

import org.testng.ITestContext ;		
import org.testng.ITestListener ;		
import org.testng.ITestResult ;

import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import ExtentReports.ExtentManager;
import ExtentReports.ExtentTestManager;
import utilities.AbstractTest;
import utilities.MyFileUtils;		

public class ListenerTest extends AbstractTest implements ITestListener						
{		
	Logger log;
	String testName;
	String testMethodName;
	ExtentTest logger;
	ITestContext context;
	@Override		
	public void onFinish(ITestContext context) {	
		log.info("===== Test FINISHED: " + testName + " =====");
		ExtentManager.getReporter().endTest(ExtentTestManager.getTest());
		ExtentManager.getReporter().flush();
	}		

	@Override		
	public void onStart(ITestContext context) {	
		this.context = context;
		this.testName = context.getCurrentXmlTest().getClasses().get(0).getName();
		context.setAttribute("testName", testName);
		this.log = LogManager.getLogger(testName);
		log.info("===== Test STARTED: " + testName + " =====");
		context.setAttribute("webDriver", this.driver);
	}		

	@Override		
	public void onTestFailedButWithinSuccessPercentage(ITestResult arg0) {					
		// TODO Auto-generated method stub				

	}		

	@Override		
	public void onTestFailure(ITestResult result) {		
        WebDriver driver = (WebDriver) result.getTestContext().getAttribute("webDriver");	
		testName = context.getAttribute("testName").toString();	
		log.info("===== Test FAILED: " + testMethodName + " =====");
		logger = ExtentManager.getReporter().startTest(testName);
		takeScreenshot(driver);
		logger.log(LogStatus.FAIL, logger.addScreenCapture(getLatestFile(MyFileUtils.getUserPath() + SCREENSHOT_PATH).getAbsolutePath()));
		context.setAttribute("methodName", methodName);
	}		

	@Override		
	public void onTestSkipped(ITestResult result) {
		testName = context.getAttribute("testName").toString();			
		log.info("===== Test SKIPPED: " + testMethodName + " =====");
		logger = ExtentManager.getReporter().startTest(testName);
		takeScreenshot(driver);
		logger.log(LogStatus.SKIP, logger.addScreenCapture(getLatestFile(MyFileUtils.getUserPath() + SCREENSHOT_PATH).getAbsolutePath()));
		context.setAttribute("methodName", methodName);
	}		

	@Override		
	public void onTestStart(ITestResult result) {		
		testMethodName = result.getMethod().getMethodName();
		result.setAttribute("testName", testMethodName);
		log.info("===== Test STARING: " + testMethodName + " =====");
	}		

	@Override		
	public void onTestSuccess(ITestResult result) {
		testName = context.getAttribute("testName").toString();		
		log.info("===== Test PASSED: " + testName + " =====");
		logger = ExtentManager.getReporter().startTest(testName);
		takeScreenshot(driver);
		logger.log(LogStatus.PASS, logger.addScreenCapture(getLatestFile(MyFileUtils.getUserPath() + SCREENSHOT_PATH).getAbsolutePath()));
		context.setAttribute("methodName", methodName);
	}	
	
	private File getLatestFile(String filePath) {
		File dir = new File(filePath);
		File[] files = dir.listFiles();
		if (files == null || files.length == 0) {
			return null;
		}
	    if (files.length > 0) {
	        Arrays.sort(files, LastModifiedFileComparator.LASTMODIFIED_REVERSE);
	    }
	    return files[0];
	}
}		
